package 3oTrabProtege.impl;

import 3oTrabProtege.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultComplexTaskHolon <br>
 * @version generated on Wed Dec 28 18:45:57 GMT 2016 by dmrg
 */
public class DefaultComplexTaskHolon extends WrappedIndividualImpl implements ComplexTaskHolon {

    public DefaultComplexTaskHolon(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#AsksSimple
     */
     
    public Collection<? extends SimpleTaskHolon> getAsksSimple() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ASKSSIMPLE,
                                               DefaultSimpleTaskHolon.class);
    }

    public boolean hasAsksSimple() {
	   return !getAsksSimple().isEmpty();
    }

    public void addAsksSimple(SimpleTaskHolon newAsksSimple) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ASKSSIMPLE,
                                       newAsksSimple);
    }

    public void removeAsksSimple(SimpleTaskHolon oldAsksSimple) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ASKSSIMPLE,
                                          oldAsksSimple);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#CTHAnswerPH
     */
     
    public Collection<? extends ProductHolon> getCTHAnswerPH() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_CTHANSWERPH,
                                               DefaultProductHolon.class);
    }

    public boolean hasCTHAnswerPH() {
	   return !getCTHAnswerPH().isEmpty();
    }

    public void addCTHAnswerPH(ProductHolon newCTHAnswerPH) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_CTHANSWERPH,
                                       newCTHAnswerPH);
    }

    public void removeCTHAnswerPH(ProductHolon oldCTHAnswerPH) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_CTHANSWERPH,
                                          oldCTHAnswerPH);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ID
     */
     
    public Collection<? extends String> getID() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, String.class);
    }

    public boolean hasID() {
		return !getID().isEmpty();
    }

    public void addID(String newID) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, newID);
    }

    public void removeID(String oldID) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, oldID);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#Name
     */
     
    public Collection<? extends String> getName() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NAME, String.class);
    }

    public boolean hasName() {
		return !getName().isEmpty();
    }

    public void addName(String newName) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NAME, newName);
    }

    public void removeName(String oldName) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NAME, oldName);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#SubTasks
     */
     
    public Collection<? extends String> getSubTasks() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_SUBTASKS, String.class);
    }

    public boolean hasSubTasks() {
		return !getSubTasks().isEmpty();
    }

    public void addSubTasks(String newSubTasks) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_SUBTASKS, newSubTasks);
    }

    public void removeSubTasks(String oldSubTasks) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_SUBTASKS, oldSubTasks);
    }


}
