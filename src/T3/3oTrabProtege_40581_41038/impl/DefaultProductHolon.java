package 3oTrabProtege.impl;

import 3oTrabProtege.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultProductHolon <br>
 * @version generated on Wed Dec 28 18:45:57 GMT 2016 by dmrg
 */
public class DefaultProductHolon extends WrappedIndividualImpl implements ProductHolon {

    public DefaultProductHolon(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ContainsComplex
     */
     
    public Collection<? extends ComplexTaskHolon> getContainsComplex() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_CONTAINSCOMPLEX,
                                               DefaultComplexTaskHolon.class);
    }

    public boolean hasContainsComplex() {
	   return !getContainsComplex().isEmpty();
    }

    public void addContainsComplex(ComplexTaskHolon newContainsComplex) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_CONTAINSCOMPLEX,
                                       newContainsComplex);
    }

    public void removeContainsComplex(ComplexTaskHolon oldContainsComplex) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_CONTAINSCOMPLEX,
                                          oldContainsComplex);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ContainsSimple
     */
     
    public Collection<? extends SimpleTaskHolon> getContainsSimple() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_CONTAINSSIMPLE,
                                               DefaultSimpleTaskHolon.class);
    }

    public boolean hasContainsSimple() {
	   return !getContainsSimple().isEmpty();
    }

    public void addContainsSimple(SimpleTaskHolon newContainsSimple) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_CONTAINSSIMPLE,
                                       newContainsSimple);
    }

    public void removeContainsSimple(SimpleTaskHolon oldContainsSimple) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_CONTAINSSIMPLE,
                                          oldContainsSimple);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ID
     */
     
    public Collection<? extends String> getID() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, String.class);
    }

    public boolean hasID() {
		return !getID().isEmpty();
    }

    public void addID(String newID) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, newID);
    }

    public void removeID(String oldID) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ID, oldID);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#Name
     */
     
    public Collection<? extends String> getName() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NAME, String.class);
    }

    public boolean hasName() {
		return !getName().isEmpty();
    }

    public void addName(String newName) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NAME, newName);
    }

    public void removeName(String oldName) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_NAME, oldName);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#Tasks
     */
     
    public Collection<? extends String> getTasks() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_TASKS, String.class);
    }

    public boolean hasTasks() {
		return !getTasks().isEmpty();
    }

    public void addTasks(String newTasks) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_TASKS, newTasks);
    }

    public void removeTasks(String oldTasks) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_TASKS, oldTasks);
    }


}
