package 3oTrabProtege;

import 3oTrabProtege.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Wed Dec 28 18:45:57 GMT 2016 by dmrg
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ComplexTaskHolon
     */

    {
        javaMapping.add("http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ComplexTaskHolon", ComplexTaskHolon.class, DefaultComplexTaskHolon.class);
    }

    /**
     * Creates an instance of type ComplexTaskHolon.  Modifies the underlying ontology.
     */
    public ComplexTaskHolon createComplexTaskHolon(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPLEXTASKHOLON, DefaultComplexTaskHolon.class);
    }

    /**
     * Gets an instance of type ComplexTaskHolon with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ComplexTaskHolon getComplexTaskHolon(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPLEXTASKHOLON, DefaultComplexTaskHolon.class);
    }

    /**
     * Gets all instances of ComplexTaskHolon from the ontology.
     */
    public Collection<? extends ComplexTaskHolon> getAllComplexTaskHolonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPLEXTASKHOLON, DefaultComplexTaskHolon.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#OperationalHolon
     */

    {
        javaMapping.add("http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#OperationalHolon", OperationalHolon.class, DefaultOperationalHolon.class);
    }

    /**
     * Creates an instance of type OperationalHolon.  Modifies the underlying ontology.
     */
    public OperationalHolon createOperationalHolon(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPERATIONALHOLON, DefaultOperationalHolon.class);
    }

    /**
     * Gets an instance of type OperationalHolon with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OperationalHolon getOperationalHolon(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPERATIONALHOLON, DefaultOperationalHolon.class);
    }

    /**
     * Gets all instances of OperationalHolon from the ontology.
     */
    public Collection<? extends OperationalHolon> getAllOperationalHolonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPERATIONALHOLON, DefaultOperationalHolon.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ProductHolon
     */

    {
        javaMapping.add("http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#ProductHolon", ProductHolon.class, DefaultProductHolon.class);
    }

    /**
     * Creates an instance of type ProductHolon.  Modifies the underlying ontology.
     */
    public ProductHolon createProductHolon(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRODUCTHOLON, DefaultProductHolon.class);
    }

    /**
     * Gets an instance of type ProductHolon with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProductHolon getProductHolon(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRODUCTHOLON, DefaultProductHolon.class);
    }

    /**
     * Gets all instances of ProductHolon from the ontology.
     */
    public Collection<? extends ProductHolon> getAllProductHolonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRODUCTHOLON, DefaultProductHolon.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#SimpleTaskHolon
     */

    {
        javaMapping.add("http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#SimpleTaskHolon", SimpleTaskHolon.class, DefaultSimpleTaskHolon.class);
    }

    /**
     * Creates an instance of type SimpleTaskHolon.  Modifies the underlying ontology.
     */
    public SimpleTaskHolon createSimpleTaskHolon(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SIMPLETASKHOLON, DefaultSimpleTaskHolon.class);
    }

    /**
     * Gets an instance of type SimpleTaskHolon with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SimpleTaskHolon getSimpleTaskHolon(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SIMPLETASKHOLON, DefaultSimpleTaskHolon.class);
    }

    /**
     * Gets all instances of SimpleTaskHolon from the ontology.
     */
    public Collection<? extends SimpleTaskHolon> getAllSimpleTaskHolonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SIMPLETASKHOLON, DefaultSimpleTaskHolon.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#SupervisorHolon
     */

    {
        javaMapping.add("http://www.semanticweb.org/dmrgo/ontologies/2016/9/finalOntology#SupervisorHolon", SupervisorHolon.class, DefaultSupervisorHolon.class);
    }

    /**
     * Creates an instance of type SupervisorHolon.  Modifies the underlying ontology.
     */
    public SupervisorHolon createSupervisorHolon(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUPERVISORHOLON, DefaultSupervisorHolon.class);
    }

    /**
     * Gets an instance of type SupervisorHolon with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SupervisorHolon getSupervisorHolon(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUPERVISORHOLON, DefaultSupervisorHolon.class);
    }

    /**
     * Gets all instances of SupervisorHolon from the ontology.
     */
    public Collection<? extends SupervisorHolon> getAllSupervisorHolonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUPERVISORHOLON, DefaultSupervisorHolon.class);
    }


}
